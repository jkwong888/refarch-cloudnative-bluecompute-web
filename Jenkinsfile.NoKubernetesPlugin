/*
    To learn how to use this sample pipeline, follow the guide below and enter the
    corresponding values for your environment and for this repository:
    - https://github.com/ibm-cloud-architecture/refarch-cloudnative-devops-kubernetes
*/

pipeline {
    
    agent {
        label "docker"
    }

    parameters {
        string(name: 'REGISTRY', defaulValue: 'docker.io', description: 'Container Registry URL')
        string(name: 'REGISTRY_NAMESPACE', defaulValue: 'ibmcase', description: 'registry namespace to push image to')
        string(name: 'IMAGE_NAME', defaultValue: 'bluecompute-web', description: 'name of image')
        credentials(name: 'REGISTRY_CREDENTIALS', defaultValue: 'registry-credentials-id', description: 'Credentials for registry', credentialType: 'Username with password')
        credentials(name: 'KUBECONFIG', description: 'Kubeconfig secret file', credentialType: 'Secret file')
        string(name: 'NAMESPACE', defaultValue: 'bluecompute', description: 'Kube namespace to deploy to')
        string(name: 'POD_NAME', defaultValue: 'web', description: 'name of pod to update image')
        string(name: 'DEPLOYMENT_LABELS', defaultValue: 'app=web,tier=frontend,version=v1')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
              sh """
              #!/bin/bash
              if [ "${env.REGISTRY}" = "docker.io" ]; then
                echo 'Building Docker Hub Image'
                docker build -t ${env.IMAGE_NAME}:${env.BUILD_NUMBER} .
              else
                echo 'Building Private Registry Image'
                docker build -t ${env.REGISTRY}/${env.REGISTRY_NAMESPACE}/${env.IMAGE_NAME}:${env.BUILD_NUMBER} .
              fi
            """
            }
        }

        stage('Push Docker Image to Registry') {
          steps {
            withCredentials([usernamePassword(credentialsId: env.REGISTRY_CREDENTIALS,
                                            usernameVariable: 'USERNAME',
                                            passwordVariable: 'PASSWORD')]) {
                sh """
                #!/bin/bash\

                docker login -u ${USERNAME} -p ${PASSWORD} ${env.REGISTRY}

                if [ "${env.REGISTRY}" = "docker.io" ]; then
                    echo 'Pushing to Docker Hub'
                    docker push ${env.IMAGE_NAME}:${env.BUILD_NUMBER}
                else
                    echo 'Pushing to Private Registry'
                    docker push ${env.REGISTRY}/${env.REGISTRY_NAMESPACE}/${env.IMAGE_NAME}:${env.BUILD_NUMBER}
                fi
                """
            }
          }
        }

        stage('Deploy new Docker Image') {
          steps {
              withCredentials([file(credentialsId: env.KUBECONFIG, variable: 'KUBECONFIG')]) {
                    sh """
                    #!/bin/bash
                    DEPLOYMENT=`kubectl --kubeconfig=$KUBECONFIG --namespace=${env.NAMESPACE} get deployments -l ${env.DEPLOYMENT_LABELS} -o name`
                    kubectl --kubeconfig=$KUBECONFIG --namespace=${env.NAMESPACE} get \${DEPLOYMENT}
                    if [ \${?} -ne "0" ]; then
                        # No deployment to update
                        echo 'No deployment to update'
                        exit 1
                    fi

                    # Get image
                    if [ "${env.REGISTRY}" = "docker.io" ]; then
                        IMAGE=${env.IMAGE_NAME}:${env.BUILD_NUMBER}
                    else
                        IMAGE=${env.REGISTRY}/${env.NAMESPACE}/${env.IMAGE_NAME}:${env.BUILD_NUMBER}
                    fi

                    # Update deployment and check rollout status
                    kubectl --kubeconfig=$KUBECONFIG --namespace=${env.NAMESPACE} set image \${DEPLOYMENT} ${env.POD_NAME}=\${IMAGE}
                    kubectl --kubeconfig=$KUBECONFIG --namespace=${env.NAMESPACE} rollout status \${DEPLOYMENT}
                    """
              }
          }
        }
    }
}